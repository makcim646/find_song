from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import json
import re
import logging
from config import get_config
from db import *

bot_token = get_config()['bot_token']
bot = Bot(bot_token) #Telegram bot token
dp = Dispatcher(bot)

#logging.basicConfig(level=logging.INFO, filename="log.log",filemode="a",
#                    format="%(asctime)s %(levelname)s %(message)s")



with open('songs.json', 'r', encoding='utf8') as file:
    data = json.load(file)
data_songs = set()
for artist, song in data.items():
    for s in song:
        data_songs.add(s)


async def send_msg(usr_id:int, text:str):
    try:
        firs = 0
        last = 100
        msg_c = len(text.split('\n'))
        while True:
            if msg_c - last < 0:
                await bot.send_message(usr_id, '\n'.join(text.split('\n')[firs:]), parse_mode="Markdown")
                break

            elif msg_c < last:
                await bot.send_message(usr_id, '\n'.join(text.split('\n')[firs:]), parse_mode="Markdown")
                break

            await bot.send_message(usr_id, '\n'.join(text.split('\n')[firs:last]), parse_mode="Markdown")

            firs += 100
            last += 100

    except Exception as e:
        logging.exception(e)



@dp.message_handler(commands=['list_order'])
async def send_welcome(msg: types.Message):
    text = get_order_book()
    usr_id = msg.from_user.id

    await send_msg(usr_id, text)



@dp.message_handler(commands=['clear_order_book'])
async def send_welcome(msg: types.Message):
    if clear_order_book():
        await bot.send_message(msg.from_user.id, "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –æ—á–∏—â–µ–Ω")

    else:
        await bot.send_message(msg.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")




@dp.message_handler(commands=['order'])
async def send_welcome(msg: types.Message):
    usr_id = str(msg.from_user.id)

    if len(msg.text.split(' ')) > 1:
        song = msg.text[7:]
        name = get_name(usr_id)

        if name != None:
            if add_order(name, song):
                await bot.send_message(msg.from_user.id, f'–ó–∞–∫–∞–∑ –Ω–∞ –ø–µ—Å–Ω—é {song} –∑–∞–ø–∏—Å–∞–Ω')
            else:
                await bot.send_message(msg.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

        else:
            await bot.send_message(msg.from_user.id, "–¢—ã –Ω–µ –≤–≤–µ–ª –∏–º–µ, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–º—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /name –ò–≤–∞–Ω")

    else:
        await bot.send_message(msg.from_user.id, "–¢—ã –Ω–µ –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /order ABBA")




@dp.message_handler(commands=['name'])
async def send_welcome(msg: types.Message):
    usr_id = str(msg.from_user.id)

    if len(msg.text.split(' ')) > 1:
        name = msg.text[6:]
        if set_name(name, usr_id):
            await bot.send_message(msg.from_user.id, f"–¢—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–µ–±–µ –∏–º–µ {name}")
        else:
            await bot.send_message(msg.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(")

    else:
        await bot.send_message(msg.from_user.id, "–¢—ã –Ω–µ –≤–≤–µ–ª –∏–º–µ, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–º—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /name –ò–≤–∞–Ω")






@dp.message_handler(commands=['not_in_db'])
async def send_welcome(msg: types.Message):
    usr_id = msg.from_user.id
    await bot.send_message(usr_id, "–Ø –ø—Ä–æ–≤–µ—Ä—è—é, –ø–æ–¥–æ–∂–¥–∏.")
    text = not_in_db(data, data_songs)


    await send_msg(usr_id, text)



@dp.message_handler(commands=['get_log'])
async def send_welcome(msg: types.Message):
    text, _ = data_log()
    usr_id = msg.from_user.id

    await send_msg(usr_id, text)



@dp.message_handler(commands=['start', 'help'])
async def send_welcome(msg: types.Message):
    text = """–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
–¢–∞–∫–∂–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –ø–µ—Å–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ–∏—Å–∫.
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @yastr
    """
    await bot.send_message(msg.from_user.id,text)




@dp.message_handler()
async def all_msg(msg: types.Message):
    logging.info(f"user_id: {msg.from_user.id} text: {msg.text.strip()}")
    songs_list, artist_list = search(str(msg.text).strip(), data, data_songs)
    r = r'\(.*\)|#|\d{5,}|\{.*\}|‚Ä¢|\[.*\]'


    text = ''
    #–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å—å –∏—Ö
    for art in artist_list:
        song_artist = data[art]
        text += f'\nüé§ `{art}`:\n'
        text += ''.join([f'- `{re.sub(r, "", song.capitalize())}`\n' for song in sorted(song_artist)])


    #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ –ø–µ—Å–µ–Ω –∏ –∑–∞–ø–∏—Å–∏—Ç—å –∏—Ö
    if len(songs_list) > 0:
        other_dict, songs_list = get_sing_from_other(songs_list, data)

        for art, songs in other_dict.items():
            text += f'\nüé§ `{art}`:\n'
            text += ''.join([f'- `{re.sub(r, "", song.capitalize())}`\n' for song in sorted(songs)])


    #–∑–∞–ø–∏—Å—å –ø–µ—Å–µ–Ω –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    if len(songs_list) > 0:
        text += '\nüé§ - OTHER -:\n'
        text += ''.join([f'- `{re.sub(r, "", s.capitalize())}`\n' for s in sorted(songs_list)])


    #–∑–∞–ø–∏—Å—å –µ—Å—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if text == '':
        text = '–ü–µ—Å–Ω—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n'

    usr_id = msg.from_user.id
    await send_msg(usr_id, text)





if __name__ == '__main__':
    executor.start_polling(dp)
